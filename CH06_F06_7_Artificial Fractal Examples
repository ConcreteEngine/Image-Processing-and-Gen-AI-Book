
import numpy as np
import matplotlib.pyplot as plt

def mandelbrot(c, max_iter):
    z = c
    for n in range(max_iter):
        if abs(z) > 2:
            return n
        z = z*z + c
    return max_iter

def generate_mandelbrot():
    xmin, xmax, ymin, ymax = -2.0, 1.0, -1.5, 1.5
    width, height, max_iter = 1000, 1000, 256
    r1, r2 = np.linspace(xmin, xmax, width), np.linspace(ymin, ymax, height)
    n3 = np.empty((width, height))
    for i in range(width):
        for j in range(height):
            n3[i, j] = mandelbrot(r1[i] + 1j*r2[j], max_iter)
    plt.imshow(n3.T, cmap='hot', extent=[xmin, xmax, ymin, ymax])
    plt.colorbar()
    plt.title('Mandelbrot Set')
    plt.show()

def generate_sierpinski(order):
    def sierpinski(order, ax, p1, p2, p3):
        if order == 0:
            ax.fill([p1[0], p2[0], p3[0]], [p1[1], p2[1], p3[1]], 'k')
        else:
            sierpinski(order - 1, ax, p1, ((p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2), ((p1[0] + p3[0]) / 2, (p1[1] + p3[1]) / 2))
            sierpinski(order - 1, ax, ((p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2), p2, ((p2[0] + p3[0]) / 2, (p2[1] + p3[1]) / 2))
            sierpinski(order - 1, ax, ((p1[0] + p3[0]) / 2, (p1[1] + p3[1]) / 2), ((p2[0] + p3[0]) / 2, (p2[1] + p3[1]) / 2), p3)

    fig, ax = plt.subplots()
    ax.set_aspect('equal')
    ax.axis('off')
    p1, p2, p3 = [0, 0], [1, 0], [0.5, np.sqrt(3)/2]
    sierpinski(order, ax, p1, p2, p3)
    plt.title('Sierpinski Gasket')
    plt.show()

def generate_koch(order):
    def koch_snowflake(order, ax, p1, p2):
        if order == 0:
            ax.plot([p1[0], p2[0]], [p1[1], p2[1]], 'k')
        else:
            dx, dy = (p2[0] - p1[0]) / 3, (p2[1] - p1[1]) / 3
            p3, p5 = [p1[0] + dx, p1[1] + dy], [p1[0] + 2*dx, p1[1] + 2*dy]
            p4 = [0.5*(p1[0] + p2[0]) - np.sqrt(3)*(p1[1] - p2[1])/6, 0.5*(p1[1] + p2[1]) + np.sqrt(3)*(p1[0] - p2[0])/6]
            koch_snowflake(order - 1, ax, p1, p3)
            koch_snowflake(order - 1, ax, p3, p4)
            koch_snowflake(order - 1, ax, p4, p5)
            koch_snowflake(order - 1, ax, p5, p2)

    fig, ax = plt.subplots()
    ax.set_aspect('equal')
    ax.axis('off')
    koch_snowflake(order, ax, [0, 0], [1, 0])
    koch_snowflake(order, ax, [1, 0], [0.5, np.sqrt(3)/2])
    koch_snowflake(order, ax, [0.5, np.sqrt(3)/2], [0, 0])
    plt.title('Koch Snowflake')
    plt.show()

def generate_julia(c):
    width, height, max_iter = 800, 800, 256
    xlim, ylim = (-1.5, 1.5), (-1.5, 1.5)
    x = np.linspace(xlim[0], xlim[1], width)
    y = np.linspace(ylim[0], ylim[1], height)
    Z = np.zeros((width, height), dtype=int)
    for ix, vx in enumerate(x):
        for iy, vy in enumerate(y):
            z = complex(vx, vy)
            for i in range(max_iter):
                z = z*z + c
                if abs(z) > 2.0:
                    Z[ix, iy] = i
                    break
    plt.imshow(Z.T, cmap='hot', extent=[*xlim, *ylim])
    plt.colorbar()
    plt.title('Julia Set')
    plt.show()

# Example Usage:
generate_mandelbrot()
generate_sierpinski(6)
generate_koch(5)
generate_julia(complex(-0.7, 0.27015))
