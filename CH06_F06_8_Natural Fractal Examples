 
import numpy as np
import matplotlib.pyplot as plt
from noise import pnoise2

# Generate Perlin noise
def generate_perlin_noise(shape, scale, octaves, persistence, lacunarity):
    noise = np.zeros(shape)
    for i in range(shape[0]):
        for j in range(shape[1]):
            noise[i][j] = pnoise2(i / scale,
                                  j / scale,
                                  octaves=octaves,
                                  persistence=persistence,
                                  lacunarity=lacunarity,
                                  repeatx=1024,
                                  repeaty=1024,
                                  base=42)
    return noise

# Generate Fractal Noise
def generate_fractal_noise(shape=(256, 256), scale=100, octaves=6, persistence=0.5, lacunarity=2.0):
    noise = generate_perlin_noise(shape, scale, octaves, persistence, lacunarity)
    
    plt.figure(figsize=(8, 8))
    plt.imshow(noise, cmap='gray', interpolation='lanczos')
    plt.title("Fractal Noise using Perlin Noise")
    plt.axis('off')
    plt.show()

# Generate and display fractal noise
generate_fractal_noise()
    z = c
    for n in range(max_iter):
        if abs(z) > 2:
            return n
        z = z*z + c
    return max_iter
