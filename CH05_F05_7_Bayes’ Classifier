
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from skimage.transform import resize
from skimage import io, color
from skimage.feature import hog
import numpy as np
import glob

# Define the directories
dir_path_human = '/Users/meltemballan/Documents/Image_Processing/CH5_Ballan/human'
dir_path_non_human = '/Users/meltemballan/Documents/Image_Processing/CH5_Ballan/none-human'

# Load images and compute color histogram for each image
feature_vectors = []
labels = []

# Load human images
for image_path in glob.glob(dir_path_human + "/*.jpg"):
    image = io.imread(image_path)
    image = resize(image, (64, 64)) 
    image = color.rgb2gray(image)  # Convert the image to grayscale
    feature_vector = hog(image, orientations=8, pixels_per_cell=(16, 16),
                    cells_per_block=(1, 1), visualize=False)
    feature_vectors.append(feature_vector)
    labels.append(1)  # Label for human

# Load non-human images
for image_path in glob.glob(dir_path_non_human + "/*.jpg"):
    image = io.imread(image_path)
    image = resize(image, (64, 64)) 
    image = color.rgb2gray(image)  # Convert the image to grayscale
    feature_vector = hog(image, orientations=8, pixels_per_cell=(16, 16),
                    cells_per_block=(1, 1), visualize=False)
    feature_vectors.append(feature_vector)
    labels.append(0)  # Label for non-human

# Convert lists to numpy arrays
feature_vectors = np.array(feature_vectors)
labels = np.array(labels)

# Split the data into a training set and a test set
features_train, features_test, labels_train, labels_test = train_test_split(feature_vectors, labels, test_size=0.2, random_state=42)

# Standardize the features to have zero mean and unit variance
scaler = StandardScaler()
features_train = scaler.fit_transform(features_train)
features_test = scaler.transform(features_test)

# Train a Naive Bayes classifier
clf = GaussianNB()
clf.fit(features_train, labels_train)

# Test the classifier on the test set
labels_pred = clf.predict(features_test)
# Calculate metrics
accuracy = accuracy_score(labels_test, labels_pred)
precision = precision_score(labels_test, labels_pred, average='weighted')
recall = recall_score(labels_test, labels_pred, average='weighted')
f1 = f1_score(labels_test, labels_pred, average='weighted')

# Print metrics
print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1}")

